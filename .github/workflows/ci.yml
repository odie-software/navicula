# .github/workflows/ci.yml

name: CI - Build and Push Docker Image

# Controls when the workflow will run
on:
  push:
    branches:
      - main # Run on pushes to the main branch
    tags:
      - nightly # Run on pushes to the 'nightly' tag
  release:
    types: [created] # Run when a new release is created
  # Optional: Allow manual runs from the Actions tab
  workflow_dispatch:

# Environment variables available to all jobs and steps
env:
  REGISTRY: ghcr.io
  # IMAGE_NAME is now defined specifically for each image in its respective job's metadata step.

jobs:
  build-and-push-web:
    name: Build and Push Web Docker Image
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    # Set permissions for the GITHUB_TOKEN for GHCR pushes.
    # Not required for Docker Hub if using a PAT.
    permissions:
      contents: read      # To checkout the code
      packages: write     # To push packages (docker images) to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checks out your code

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node.js version

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10 # Or your preferred pnpm version
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./web # Run pnpm install in the web directory
        run: pnpm install --frozen-lockfile

      - name: Run Linter (ESLint)
        working-directory: ./web # Run lint in the web directory
        run: pnpm lint

      - name: Run Formatter Check (Prettier)
        working-directory: ./web # Run format check in the web directory
        run: pnpm format

      - name: Log in to the Container registry
        # This action logs in to a Docker registry
        # For GHCR, it uses the built-in GITHUB_TOKEN
        # For Docker Hub, you'll need to provide DOCKERHUB_USERNAME and a DOCKERHUB_TOKEN (Personal Access Token) as secrets
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          # --- GHCR Login ---
          username: ${{ github.actor }}       # Your GitHub username or org name
          password: ${{ secrets.GITHUB_TOKEN }} # Automatically generated token

      - name: Extract metadata (tags, labels) for Docker
        # This action extracts useful metadata like git sha, tags, etc.
        # It automatically generates webropriate tags based on the event (e.g., 'latest' for default branch push, git sha)
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/navicula
          tags: |
            # Push to main branch or nightly tag -> nightly tag
            type=raw,value=nightly,enable=${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/tags/nightly') }}
            # Release created -> stable tag
            type=raw,value=stable,enable=${{ github.event_name == 'release' }}
            # Release created -> latest tag
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
            # Optional: Add git sha tag for all pushes/releases for traceability
            type=sha,prefix=sha-,enable=${{ github.event_name == 'push' || github.event_name == 'release' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # This action creates a BuildKit builder instance

      - name: Build and push Web Docker image
        # This action builds the Docker image and pushes it to the registry
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # Only push on 'push' events (like merging to main), not on 'pull_request'
          tags: ${{ steps.meta-web.outputs.tags }} # Use tags generated by the metadata action for web
          labels: ${{ steps.meta-web.outputs.labels }} # Add labels generated by the metadata action for web
          cache-from: type=gha # Enable build cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Enable saving build cache to GitHub Actions cache

  build-and-push-api:
    name: Build and Push API Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # If the API build should wait for the web build to succeed, uncomment the following line:
    # needs: build-and-push-web

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Note: Node.js setup, pnpm, linting, and formatting steps are specific to the web frontend (build-and-push-web job)
      # and are therefore omitted here. If the API required specific pre-build steps (e.g., installing Python dependencies),
      # they would be added here.

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for API Docker
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/navicula-api
          tags: |
            # Push to main branch or nightly tag -> nightly tag
            type=raw,value=nightly,enable=${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/tags/nightly') }}
            # Release created -> stable tag
            type=raw,value=stable,enable=${{ github.event_name == 'release' }}
            # Release created -> latest tag
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
            # Optional: Add git sha tag for all pushes/releases for traceability
            type=sha,prefix=sha-,enable=${{ github.event_name == 'push' || github.event_name == 'release' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
